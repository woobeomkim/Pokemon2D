using System.Collections;
using System.Collections.Generic;
using UnityEngine;


/*
 인터페이스의 장점

일관된 코드 작성 → 특정 기능을 가진 모든 클래스가 같은 메서드를 구현하도록 보장
유연한 설계 → 다양한 객체에 적용할 수 있음
결합도를 낮춰 코드 유지보수 용이
다중 상속 가능 → 하나의 클래스가 여러 개의 인터페이스를 구현할 수 있음
 
 인터페이스를 쓰면 좋은 경우
플레이어, 적, 오브젝트 등 공통된 기능을 강제해야 할 때
여러 개의 클래스가 같은 동작을 공유해야 할 때 (예: IDamageable, IMovable, IInteractable)
유연한 코드를 만들고 싶을 때 (객체가 어떤 클래스인지 몰라도 인터페이스를 통해 기능 실행 가능)
클래스 상속의 한계를 극복하고 싶을 때 (다중 상속 불가능하지만, 인터페이스는 여러 개 구현 가능)

인터페이스는 특정 기능을 강제하는 역할을 함
여러 클래스에서 공통적인 동작을 가질 때 유용함
다형성을 활용하여 더 유연한 코드 작성 가능
게임 개발에서 공격, 상호작용, 이동 등의 기능을 모듈화하는 데 자주 사용됨

즉, 인터페이스를 사용하면 코드가 깔끔해지고, 확장성이 좋아져서 유지보수하기 쉬워집니다! 

 */
public interface Interactable 
{
    IEnumerator Interact(Transform initiator);
}
